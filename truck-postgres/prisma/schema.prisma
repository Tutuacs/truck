// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id       String  @id @default(uuid())
  email    String  @unique
  password String
  role     Int     @default(1)
  image    String?
  User     User?   @relation(fields: [userId], references: [id])
  userId   String  @unique
}

model User {
  id            String   @id @default(uuid())
  name          String?
  email         String?
  document      String?
  profile       Profile?
  verifiedEmail Boolean  @default(false)
  Trucks        Truck[]
  Cart          Cart?
  Order         Order[]
}

model Cart {
  id      String    @id @default(uuid())
  Product Product[]
  Combo   Combo[]
  User    User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String    @unique
}

model Truck {
  id       String    @id @default(uuid())
  name     String    @unique
  image    String?
  pound    Int       @default(0)
  brand    String
  year     String?
  capacity String?
  engine   String?
  from     Truck?    @relation("TruckToTruck", fields: [fromId], references: [id])
  fromId   String?
  subTruck Truck[]   @relation("TruckToTruck")
  User     User[]
  Product  Product[]
}

model Product {
  id               String             @id @unique @default(uuid())
  name             String
  description      String?
  image            String?
  active           Boolean            @default(true)
  price            Float
  color            String?
  RelatedWith      Product[]          @relation("ProductToProduct")
  RelationWith     Product[]          @relation("ProductToProduct")
  Brands           Brands?            @relation(fields: [brandsId], references: [id])
  brandsId         String
  Truck            Truck[]
  promotion        Boolean            @default(false)
  comboId          String?
  PromotionProduct PromotionProduct[]
  Cart             Cart[]
  Item             Item[]
  OrderItems       OrderItems[]
}

model PromotionProduct {
  id          String     @id @default(uuid())
  price       Float
  active      Boolean    @default(false)
  Product     Product   @relation(fields: [productId], references: [id])
  productId   String
  Promotion   Promotion @relation(fields: [promotionId], references: [id])
  promotionId String
}

model Promotion {
  id               String             @id @default(uuid())
  name             String             @unique
  promotionFrom    DateTime?
  promotionTo      DateTime?
  PromotionProduct PromotionProduct[]
}

model Combo {
  id     String  @id @default(uuid())
  name   String  @unique
  active Boolean @default(true)
  Item   Item[]
  Cart   Cart[]
}

model Item {
  id        String  @id @default(uuid())
  price     Float
  active    Boolean @default(true)
  minCombo  Int?    @default(1)
  maxCombo  Int?    @default(1)
  Product   Product @relation(fields: [productId], references: [id])
  productId String
  Combo     Combo?  @relation(fields: [comboId], references: [id])
  comboId   String?
}

model Brands {
  id      String    @id @default(uuid())
  name    String    @unique
  product Product[]
}

model Order {
  id         String       @id @default(uuid())
  total      Float
  date       DateTime     @default(now())
  status     Int          @default(0)
  imageId    String?
  OrderItems OrderItems[]
  User       User         @relation(fields: [userId], references: [id])
  userId     String
}

model OrderItems {
  id        String  @id @default(uuid())
  quantity  Int
  price     Float
  active    Boolean @default(true)
  Product   Product @relation(fields: [productId], references: [id])
  productId String
  Order     Order?  @relation(fields: [orderId], references: [id])
  orderId   String?
}
