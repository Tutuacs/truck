// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id       String  @id @default(uuid())
  email    String  @unique
  password String
  role     Int     @default(1)
  image    String?
  User     User?   @relation(fields: [userId], references: [id])
  userId   String  @unique
}

model User {
  id            String   @id @default(uuid())
  name          String?
  email         String?
  cpf           String?
  profile       Profile?
  company       Boolean  @default(false)
  cnpj          String?
  verifiedEmail Boolean  @default(false)
  Trucks        Truck[]
  Cart          Cart?
  Order         Order[]
}

model Cart {
  id      String    @id @default(uuid())
  Product Product[]
  Combo   Combo[]
  User    User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String    @unique
}

model Truck {
  id         String    @id @default(uuid())
  image      String?
  pound      Int       @default(0)
  brand      String
  modelImage String?
  year       String?
  capacity   String?
  engine     String?
  User       User[]
  Product    Product[]
}

model Product {
  id          String     @id @unique @default(uuid())
  name        String
  description String?
  image       String?
  price       Float
  color       String?
  Types       Types[]
  Brands      Brands?    @relation(fields: [brandsId], references: [id])
  brandsId    String?
  Truck       Truck[]
  promotion   Boolean    @default(false)
  Item        Item[]
  Promotion   Promotion? @relation(fields: [promotionId], references: [id])
  promotionId String?
  Cart        Cart?      @relation(fields: [cartId], references: [id])
  cartId      String?
}

model Types {
  id        String   @id @default(uuid())
  color     String?
  image     String?
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model Promotion {
  id             String    @id @default(uuid())
  Item           Product[]
  promotionFrom  DateTime?
  promotionTo    DateTime?
  promotionPrice Float?
  minPromotion   Int?      @default(1)
}

model Combo {
  id        String   @id @default(uuid())
  Product   Item[]
  Cart      Cart[]
}

model Item {
  id             String  @id @default(uuid())
  quantity       Int     @default(1)
  price          Float
  minCombo       Int?    @default(1)
  maxCombo       Int?    @default(1)
  applyPromotion Boolean @default(false)
  Product        Product @relation(fields: [productId], references: [id])
  productId      String
  Order          Order?  @relation(fields: [orderId], references: [id])
  orderId        String?
  Combo          Combo?  @relation(fields: [comboId], references: [id])
  comboId        String?
}

model Brands {
  id      String    @id @default(uuid())
  name    String?
  product Product[]
}

model Order {
  id     String @id @default(uuid())
  Item   Item[]
  User   User   @relation(fields: [userId], references: [id])
  userId String
}
